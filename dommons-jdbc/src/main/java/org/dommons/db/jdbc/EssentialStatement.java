/*
 * @(#)EssentialStatement.java     2012-1-17
 */
package org.dommons.db.jdbc;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import org.dommons.core.convert.Converter;

/**
 * 基本连接状态包装实现
 * @author Demon 2012-1-17
 */
public class EssentialStatement<C extends EssentialConnection> extends ClosableContainer implements Statement {

	/** 目标连接状态 */
	protected final Statement tar;

	/** 父连接 */
	protected final C conn;

	/** 是否关闭 */
	private volatile boolean closed;

	/**
	 * 构造函数
	 * @param stat 目标连接状态
	 * @param conn 父连接
	 */
	protected EssentialStatement(Statement stat, C conn) {
		this.tar = stat;
		this.conn = conn;
		this.closed = false;
	}

	public void addBatch(String sql) throws SQLException {
		tar.addBatch(sql);
	}

	public void cancel() throws SQLException {
		tar.cancel();
	}

	public void clearBatch() throws SQLException {
		tar.clearBatch();
	}

	public void clearWarnings() throws SQLException {
		tar.clearWarnings();
	}

	public void close() throws SQLException {
		if (!closed) {
			closeChildren();
			tar.close();
			conn.remove(this);
			closed = true;
		}
	}

	public void closeOnCompletion() throws SQLException {
		VersionAdapter.invoke(tar, VersionAdapter.find(Statement.class, "closeOnCompletion"));
	}

	public boolean execute(String sql) throws SQLException {
		return tar.execute(sql);
	}

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return tar.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return tar.execute(sql, columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return tar.execute(sql, columnNames);
	}

	public int[] executeBatch() throws SQLException {
		return tar.executeBatch();
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		return result(tar.executeQuery(sql));
	}

	public int executeUpdate(String sql) throws SQLException {
		return tar.executeUpdate(sql);
	}

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return tar.executeUpdate(sql, autoGeneratedKeys);
	}

	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return tar.executeUpdate(sql, columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return tar.executeUpdate(sql, columnNames);
	}

	public Connection getConnection() throws SQLException {
		return conn;
	}

	public int getFetchDirection() throws SQLException {
		return tar.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		return tar.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return result(tar.getGeneratedKeys());
	}

	public int getMaxFieldSize() throws SQLException {
		return tar.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return tar.getMaxRows();
	}

	public boolean getMoreResults() throws SQLException {
		return tar.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return tar.getMoreResults(current);
	}

	public int getQueryTimeout() throws SQLException {
		return tar.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		return result(tar.getResultSet());
	}

	public int getResultSetConcurrency() throws SQLException {
		return tar.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		return tar.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		return tar.getResultSetType();
	}

	public int getUpdateCount() throws SQLException {
		return tar.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		return tar.getWarnings();
	}

	public boolean isClosed() throws SQLException {
		return closed || Converter.P.convert(VersionAdapter.invoke(tar, VersionAdapter.find(Statement.class, "isClosed")), boolean.class);
	}

	public boolean isCloseOnCompletion() throws SQLException {
		return Converter.P.convert(VersionAdapter.invoke(tar, VersionAdapter.find(Statement.class, "isCloseOnCompletion")), boolean.class);
	}

	public boolean isPoolable() throws SQLException {
		return Converter.P.convert(VersionAdapter.invoke(tar, VersionAdapter.find(Statement.class, "isPoolable")), boolean.class);
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return Converter.P.convert(VersionAdapter.invoke(tar, VersionAdapter.find(Statement.class, "isWrapperFor", Class.class), iface),
			boolean.class);
	}

	public void setCursorName(String name) throws SQLException {
		tar.setCursorName(name);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		tar.setEscapeProcessing(enable);
	}

	public void setFetchDirection(int direction) throws SQLException {
		tar.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException {
		tar.setFetchSize(rows);
	}

	public void setMaxFieldSize(int max) throws SQLException {
		tar.setMaxFieldSize(max);
	}

	public void setMaxRows(int max) throws SQLException {
		tar.setMaxRows(max);
	}

	public void setPoolable(boolean poolable) throws SQLException {
		VersionAdapter.invoke(tar, VersionAdapter.find(Statement.class, "setPoolable", boolean.class), poolable);
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		tar.setQueryTimeout(seconds);
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		return Converter.P.convert(VersionAdapter.invoke(tar, VersionAdapter.find(Statement.class, "unwrap", Class.class), iface), iface);
	}

	public boolean wasNull() throws SQLException {
		return ((CallableStatement) tar).wasNull();
	}

	/**
	 * 处理结果集
	 * @param rs 结果集
	 * @return 新结果集
	 */
	protected ResultSet result(ResultSet rs) {
		return add(wrap(rs));
	}

	/**
	 * 包装结果集
	 * @param rs 原结果集
	 * @return 目标结果集
	 */
	protected ResultSet wrap(ResultSet rs) {
		return new EssentialResultSet(rs, this);
	}
}
